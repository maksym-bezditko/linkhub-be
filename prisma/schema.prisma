// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  PROFILE_IMAGE @map("profile_image")
  POST_IMAGE    @map("post_image")
}

model User {
  id String @id @default(uuid())

  email        String @unique
  passwordHash String @map("password_hash")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  profile        Profile?
  authInfo       AuthInfo?

  posts          Post[]
  likes          Like[]
  images         Image[]
  followedBy     Follow[]  @relation("FollowingUserRelation")
  followingUsers Follow[]  @relation("FollowedUserRelation")
}

model AuthInfo {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @map("user_id")

  refreshTokenHash String? @map("refresh_token_hash")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Profile {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @map("user_id")

  fullName String  @map("full_name")
  bio      String?
  userName String  @unique @map("user_name")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  image Image?
}

model Post {
  id String @id @default(uuid())

  caption  String?
  location String?

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  image Image?

  likes Like[]
}

model Image {
  id String @id @default(uuid())

  name String @unique

  role Role

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  post   Post?   @relation(fields: [postId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  postId String? @unique @map("post_id")

  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  profileId String?  @unique @map("profile_id")

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String
}

model Like {
  id String @id @default(uuid())

  post   Post   @relation(fields: [postId], references: [id])
  postId String @map("post_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Follow {
  id String @id @default(uuid())

  follower   User   @relation("FollowingUserRelation", fields: [followerId], references: [id])
  followerId String

  followedUser   User   @relation("FollowedUserRelation", fields: [followedUserId], references: [id])
  followedUserId String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}
