// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Sex {
  MALE
  FEMALE
}

model User {
  id String @id @default(uuid()) @db.Uuid

  email        String @unique @db.VarChar(100)
  passwordHash String @map("password_hash") @db.VarChar(500)

  refreshTokenHash String? @map("refresh_token_hash") @db.VarChar(500)

  bio       String? @db.VarChar(1000)
  firstName String  @map("first_name") @db.VarChar(50)
  lastName  String  @map("last_name") @db.VarChar(50)
  sex       Sex
  nickname  String  @unique @map("nickname") @db.VarChar(100)

  profileImageName String? @unique @map("profile_image_name") @db.Uuid

  settings Settings?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  posts      Post[]
  likes      Like[]
  postImages PostImage[]
  followedBy Follow[]    @relation("FollowingUserRelation")
  following  Follow[]    @relation("FollowedUserRelation")

  @@map("users")
}

model Settings {
  id String @id @default(uuid()) @db.Uuid

  darkThemeEnabled Boolean @map("dark_theme_enabled")

  messageNotificationsEnabled       Boolean @map("message_notifications_enabled")
  friendRequestNotificationsEnabled Boolean @map("friend-request_notifications_enabled")
  likeNotificationsEnabled          Boolean @map("like_notifications_enabled")
  subscriptionNotificationsEnabled  Boolean @map("subscription_notifications_enabled")
  commentNotificationsEnabled       Boolean @map("comment_notifications_enabled")

  backupEnabled Boolean @map("backup_enabled")

  peopleRecommendationsEnabled Boolean @map("people_recommendations_enabled")
  sensitiveContentAllowed      Boolean @map("sensitive_content_allowed")

  likesVisibilityEnabled Boolean @map("likes_visibility_enabled")
  privateAccountEnabled  Boolean @map("private_account_enabled")

  strangerMessagesEnabled Boolean @map("stranger_messages_enabled")
  spamBlockEnabled        Boolean @map("spam_block_enabled")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique @map("user_id") @db.Uuid

  @@map("settings")
}

model Post {
  id String @id @default(uuid()) @db.Uuid

  caption  String?
  location String? @db.VarChar(50)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @map("user_id") @db.Uuid

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  postImages      PostImage[]
  postsOnHashtags PostsOnHashtags[]
  likes           Like[]

  @@map("posts")
}

model Hashtag {
  id String @id @default(uuid()) @db.Uuid

  postsOnHashtags PostsOnHashtags[]

  name String @unique

  @@map("hashtags")
}

model PostsOnHashtags {
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String @db.Uuid

  hashtag   Hashtag @relation(fields: [hashtagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  hashtagId String  @db.Uuid

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([postId, hashtagId])
  @@map("posts_hashtags")
}

model PostImage {
  id String @id @default(uuid()) @db.Uuid

  name String @unique @db.Uuid

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String @db.Uuid

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String @map("post_id") @db.Uuid

  @@map("post_images")
}

model Like {
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String @map("post_id") @db.Uuid

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @map("user_id") @db.Uuid

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([postId, userId])
  @@map("likes")
}

model Follow {
  following       User   @relation("FollowingUserRelation", fields: [followingUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followingUserId String @db.Uuid

  followedUser   User   @relation("FollowedUserRelation", fields: [followedUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followedUserId String @db.Uuid

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([followingUserId, followedUserId])
  @@map("follows")
}
