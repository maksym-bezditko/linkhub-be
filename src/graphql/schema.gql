# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CheckForEmailExistenceInput {
  email: String!
}

input CheckForNicknameExistenceInput {
  nickname: String!
}

type CommonResponse {
  succeeded: Boolean!
}

input CreatePostInput {
  caption: String!
  hashtags: [String!]!
  location: String
}

input CreateUserInput {
  bio: String
  birthday: String!
  email: String!
  firstName: String!
  lastName: String!
  nickname: String!
  password: String!
  sex: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeletePostInput {
  postId: Float!
}

type FollowResponse {
  createdAt: DateTime!
  followedUserId: Float!
  followingUserId: Float!
  updatedAt: DateTime!
}

input FollowUserInput {
  userId: Float!
}

type FollowsByAgeStatsResponse {
  female: Stats!
  male: Stats!
}

type HashtagResponse {
  id: Float!
  name: String!
}

input HashtagsInput {
  tags: [String!]!
}

input LikePostInput {
  postId: Float!
}

type LikeResponse {
  createdAt: DateTime!
  postId: Float!
  updatedAt: DateTime!
  userId: Float!
}

input LoginWithEmailInput {
  email: String!
  password: String!
}

type Mutation {
  createPost(createPostInput: CreatePostInput!): PostWithImagesAndLikesResponse!
  createUser(createUserInput: CreateUserInput!): TokensResponse!
  deleteAccount: CommonResponse!
  deletePost(deletePostInput: DeletePostInput!): CommonResponse!
  followUser(followUserInput: FollowUserInput!): CommonResponse!
  likePost(likePostInput: LikePostInput!): CommonResponse!
  logout: UserIdResponse!
  unfollowUser(unfollowUserInput: UnfollowUserInput!): CommonResponse!
  unlikePost(unlikePostInput: UnlikePostInput!): CommonResponse!
  updatePost(updatePostInput: UpdatePostInput!): PostWithImagesAndLikesResponse!
  updateUser(updateUserInput: UpdateUserInput!): CommonResponse!
}

type PostImageResponse {
  createdAt: DateTime!
  id: Float!
  updatedAt: DateTime!
  url: String!
}

type PostOwnerResponse {
  id: Float!
  nickname: String!
}

type PostResponse {
  caption: String
  createdAt: DateTime!
  id: Float!
  location: String
  updatedAt: DateTime!
  user: PostOwnerResponse!
}

type PostWithImagesAndLikesResponse {
  caption: String
  createdAt: DateTime!
  id: Float!
  likes: [LikeResponse!]!
  location: String
  postImages: [PostImageResponse!]!
  updatedAt: DateTime!
  user: PostOwnerResponse!
}

type Query {
  checkForEmailExistence(checkForEmailExistenceInput: CheckForEmailExistenceInput!): CommonResponse!
  checkForNicknameExistence(checkForNicknameExistenceInput: CheckForNicknameExistenceInput!): CommonResponse!
  getFollowsByAgeStats: FollowsByAgeStatsResponse!
  getFriendsPosts(hashtagsInput: HashtagsInput!): [PostWithImagesAndLikesResponse!]!
  getHashtags: [HashtagResponse!]!
  getPostsRecommendations: [PostWithImagesAndLikesResponse!]!
  getRecommendations: [UserResponse!]!
  getUserById: UserResponse!
  getUserPosts: [PostWithImagesAndLikesResponse!]!
  getUsersStats: [UserStats!]!
  getUsersWithTopFollows: [UserStats!]!
  getUsersWithTopPosts: [UserStats!]!
  loginWithEmail(loginWithEmailInput: LoginWithEmailInput!): TokensResponse!
  refreshTokens: TokensResponse!
  searchUsers(searchUsersInput: SearchUsersInput!): [UserResponse!]!
}

input SearchUsersInput {
  searchBy: String!
  searchText: String!
  sex: String!
  sortBy: String!
  withPostsOnly: Boolean!
}

type Stats {
  to10: Float!
  to20: Float!
  to30: Float!
  to40: Float!
  to50: Float!
  to60: Float!
  to70: Float!
  to80: Float!
}

type TokensResponse {
  accessToken: String!
  refreshToken: String!
}

input UnfollowUserInput {
  userId: Float!
}

input UnlikePostInput {
  postId: Float!
}

input UpdatePostInput {
  caption: String!
  id: Float!
  location: String!
  photoLink: String!
}

input UpdateUserInput {
  bio: String
  birthday: String
  email: String
  firstName: String
  lastName: String
  nickname: String
  password: String
  sex: String
}

type UserIdResponse {
  userId: Float!
}

type UserResponse {
  bio: String
  birthday: DateTime!
  createdAt: DateTime!
  email: String!
  firstName: String!
  followedBy: [FollowResponse!]!
  following: [FollowResponse!]!
  id: Float!
  lastName: String!
  nickname: String!
  passwordHash: String!
  posts: [PostResponse!]!
  profileImageName: String
  refreshTokenHash: String!
  sex: String!
  updatedAt: DateTime!
}

type UserStats {
  age: Float!
  firstName: String!
  followersNumber: Float!
  followingNumber: Float!
  id: Float!
  lastName: String!
  sex: String!
}