# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CheckIfUserExistsByEmailInput {
  email: String!
}

input CheckIfUserExistsByNicknameInput {
  nickname: String!
}

type CommonResponse {
  succeeded: Boolean!
}

input CreatePostInput {
  caption: String!
  hashtags: [String!]!
  location: String
}

input CreateUserInput {
  bio: String
  birthday: String!
  email: String!
  firstName: String!
  lastName: String!
  nickname: String!
  password: String!
  sex: Sex!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeletePostInput {
  postId: Float!
}

type ExistsResponse {
  exists: Boolean!
}

type HashtagResponse {
  id: Float!
  name: String!
}

input LikePostInput {
  postId: Float!
}

type LikeResponse {
  createdAt: DateTime!
  post: PostResponse
  postId: Float!
  updatedAt: DateTime!
  userId: Float!
}

input LoginWithEmailInput {
  email: String!
  password: String!
}

type Mutation {
  createPost(createPostInput: CreatePostInput!): PostResponse!
  createUser(createUserInput: CreateUserInput!): TokensResponse!
  deleteAccount: CommonResponse!
  deletePost(deletePostInput: DeletePostInput!): CommonResponse!
  followUser(userIdToFollow: Float!): CommonResponse!
  likePost(likePostInput: LikePostInput!): CommonResponse!
  logout: UserIdResponse!
  unfollowUser(userIdToUnfollow: Float!): CommonResponse!
  unlikePost(unlikePostInput: UnlikePostInput!): CommonResponse!
  updatePost(updatePostInput: UpdatePostInput!): PostResponse!
  updateUser(updateUserInput: UpdateUserInput!): CommonResponse!
}

type PostResponse {
  caption: String
  createdAt: DateTime!
  hashtags: [HashtagResponse!]!
  id: Float!
  likes: [LikeResponse!]!
  location: String
  owner: UserResponse!
  updatedAt: DateTime!
  userId: Float!
}

type Query {
  checkIfUserExistsByEmail(checkIfUserExistsByEmailInput: CheckIfUserExistsByEmailInput!): ExistsResponse!
  checkIfUserExistsByNickname(checkIfUserExistsByNicknameInput: CheckIfUserExistsByNicknameInput!): ExistsResponse!
  getFollowingsPosts: [PostResponse!]!
  getMyPosts: [PostResponse!]!
  getMyProfile: UserResponse!
  getPostsRecommendations: [PostResponse!]!
  loginWithEmail(loginWithEmailInput: LoginWithEmailInput!): TokensResponse!
  refreshTokens: TokensResponse!
  searchUsers(searchUsersInput: SearchUsersInput!): [UserResponse!]!
}

input SearchUsersInput {
  searchBy: String!
  searchText: String!
  sex: SexFilter!
  sortBy: String!
  withPostsOnly: Boolean!
}

enum Sex {
  FEMALE
  MALE
}

enum SexFilter {
  ALL
  FEMALES
  MALES
}

type TokensResponse {
  accessToken: String!
  refreshToken: String!
}

input UnlikePostInput {
  postId: Float!
}

input UpdatePostInput {
  caption: String!
  id: Float!
  location: String!
  photoLink: String!
}

input UpdateUserInput {
  bio: String
  birthday: String
  email: String
  firstName: String
  lastName: String
  nickname: String
  password: String
  sex: Sex
}

type UserIdResponse {
  userId: Float!
}

type UserResponse {
  bio: String
  birthday: DateTime!
  createdAt: DateTime!
  email: String!
  firstName: String!
  followers: [UserResponse!]!
  following: [UserResponse!]!
  id: Float!
  lastName: String!
  nickname: String!
  passwordHash: String!
  posts: [PostResponse!]!
  profileImage: String
  profileImageName: String
  refreshTokenHash: String
  sex: String!
  updatedAt: DateTime!
}